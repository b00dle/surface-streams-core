import requests

from core.webutils import api_helper
from core.tuio.tuio_tracking_config_parser import TuioTrackingConfigParser


class RemoteTrackingSession(object):
    """
    Wrapper for ReST API call based communication to a Surface Streams remote tracking server. Helps establish a remote
    tracking instance over http, handles uploading of tracking config and sharing of resources referenced in config. For
    more info on Surface Streams 2.0 remote tracker see https://github.com/b00dle/surface-streams-remote-tracker
    """

    def __init__(self, tracking_server_ip="0.0.0.0", tracking_server_port=9000,
                 surface_streams_server_ip="0.0.0.0", surface_streams_server_tuio_port=5001,
                 frame_width=640, frame_protocol="jpeg",
                 patterns_config="", user_id=-1):
        """
        Constructor.

        :param tracking_server_ip: ip of the Surface Streams 2.0 remote tracker server

        :param tracking_server_port: port for receiving ReST API calls on the Surface Streams 2.0 remote tracker server

        :param surface_streams_server_ip: ip of the Surface Streams 2.0 server

        :param surface_streams_server_tuio_port: port for receiving tuio events on the Surface Streams 2.0 server

        :param frame_width: width for the input frame send to the remote tracker

        :param frame_protocol: protocol encoding used for video stream sent to Surface Streams 2.0 remote tracker
        server. Choose 'jpeg', 'vp8', 'vp9', 'mp4', 'h264' or 'h265'

        :param patterns_config: path to the JSON formatted tracking config file (see
        tuio/tuio_tracking_config_parser.py)

        :param user_id: user id to use in all tuio events generated by Surface Streams 2.0 remote tracker
        """
        self._tracking_server_ip = tracking_server_ip
        self._tracking_server_port = tracking_server_port
        self._surface_streams_server_ip = surface_streams_server_ip
        self._surface_streams_server_tuio_port = surface_streams_server_tuio_port
        self._frame_width = frame_width
        self._frame_protocol = frame_protocol
        self._patterns_config = patterns_config
        self._user_id = user_id
        self._is_connected = False
        # received upon connecting
        self._uuid = None
        self._frame_port = -1

    def get_uuid(self):
        """
        Returns the uuid for this session, which is received after registering the session. (see self.connect())

        :return: str
        """
        return self._uuid

    def get_frame_port(self):
        """
        Returns the port at which Surface Streams 2.0 remote tracker expects gstreamer based udp input for video stream.
        Will be received after registering the session. (see self.connect())

        :return: int
        """
        return self._frame_port

    def get_tracking_server_url(self):
        """
        Returns the full address for ReST API interaction with the Surface Streams 2.0 remote tracker of this instance.

        :return: str
        """
        return "http://" + self._tracking_server_ip + ":" + str(self._tracking_server_port)

    def get_patterns_config(self):
        """
        Returns the JSON formatted config file this session is using.

        :return: filepath to config
        """
        return self._patterns_config

    def set_patterns_config(self, path):
        """
        Sets and uploads the JSON formatted tracking config file this session should be using. This function should
        only be called after connecting the session (see self.connect()).

        :param path: filepath to config

        :return: None
        """
        self._patterns_config = path
        if len(self._patterns_config) > 0:
            api_helper.upload_tracking_config(
                self._uuid, self.get_tracking_server_url(), self._patterns_config
            )
            print("RemoteTrackingSession: Tracking config uploaded from", self._patterns_config)

    def connect(self):
        """
        Establishes a connection to the Surface Streams 2.0 remote tracker server and registeres the settings configured
        during initialization of this instance. uuid and frame_port are received once connected and the server will
        be ready waiting for the input video stream of the tracking process.

        :return: Success of initialization.
        """
        if self._is_connected:
            print("### FAILURE\n  > client already connected")
            return False

        tracking_url = self.get_tracking_server_url()

        r = requests.post(tracking_url + "/api/processes", data={}, json={
            "frame_port": self._frame_port,
            "frame_protocol": self._frame_protocol,
            "frame_width": self._frame_width,
            "server_ip": self._surface_streams_server_ip,
            "tuio_port": self._surface_streams_server_tuio_port,
            "user_id": self._user_id
        })
        if r.status_code == 200:
            if r.headers['content-type'] == "application/json":
                data = r.json()
                self._frame_port = data["frame_port"]
                self._surface_streams_server_tuio_port = data["tuio_port"]
                self._uuid = data["uuid"]
                self._user_id = data["user_id"]
                self._is_connected = True
                print("### SUCCESS connecting remote tracking\n  > data", data)
                print("  > Server is expecting video stream at udp port", data["frame_port"])
                print("    > stream format should be", data["frame_protocol"])
                print("  > Server is forwarding tuio data to", data["server_ip"])
                print("    > at port", data["tuio_port"])
                print("  > USER ID assigned is", data["user_id"])
                if len(self._patterns_config) > 0:
                    # upload all resources necessary to setup tracking
                    parser = TuioTrackingConfigParser(self._patterns_config)
                    for resource in parser.get_full_resource_paths():
                        api_helper.upload_tracking_resource(self._uuid, tracking_url, resource)
                        print("  > Resource uploaded at", resource)
                    # upload tracking config (will start tracking if successful)
                    api_helper.upload_tracking_config(self._uuid, tracking_url, self._patterns_config)
                    print("  > Tracking config uploaded from", self._patterns_config)
                print("###")
                return True
            else:
                raise ValueError("### API error\n > expecting response json")
        else:
            print("### HTTP error\n  > code", r.status_code)
            print("  > reason", r.reason)
            return False

    def disconnect(self):
        """
        Unregister a running Surface Streams 2.0 remote tracker session. Make sure to call this function prior to
        calling __del__ or removing refs on this instance. Otherwise, the remote tracking session will not be cleared on
        the server side.

        :return: Success of clearing session
        """
        if not self._is_connected:
            print("### FAILURE\n  > remote tracking not connected")
            return False
        url = self.get_tracking_server_url() + "/api/processes/" + self._uuid
        r = requests.delete(url)
        if r.status_code == 200:
            print("### SUCCESS\n  > remote tracking disconnected")
            self._uuid = None
            return True
        else:
            print("### HTTP error\n  > code", r.status_code)
            print("  > reason", r.reason)
            return False
